#RetroDevStudio.MetaData.BASIC:7169,BASIC V7.0 VDC
#BMP-AGI
# THIS PROGRAM'S GOAL IS TO CONVERT 320X200 IMAGES TO 640X200 VDC FORMAT
# PREREQ IS THAT NO COLOR CLASHES ARE PRESENT IN THE FILES
#  IF THERE ARE, RESULT WILL DIFFER FROM EXPECTATION :-)

# THIS READS 4-BIT COLOR FILES. 1 BYTE CONTAINS 2 PIXELS


# DEFINE FUNCTIONS
10 GOSUB 920
20 BS=FN W(45)
30 BE=FN W(4624)
# DB=DATA BEGIN
# DE=DATA END
40 DB=BE+1:DE=DB+8000

50 PRINT "BASIC FROM "BS" TO "BE"."
60 PRINT "LEAVES "FRE(0)" BYTES FREE."
70 DD=PEEK(186)

80 PRINT "INSERT DATADISK":GETKEY I$

90 BLOAD "VDCBASICAC6.BIN",B0,U(DD):SYS DEC("AC6")

100 AP=16000

110 GRAPHIC 0

120 RGO 28,2 4:REM 64K VRAM
130 RGO 25,128:REM BITMAP MODE ON
# 2 SCANLINES PER CHAR, 156 SCANLINES (EACH VAL +1)
140 RGW 0,127:RGW 4,155:RGW 6,100:RGW 7,140:RGW 9,1
150 RGW 36,0

160 ATTR AP:DISP 0
170 VMF 0,0,24000: REM CLEAR VRAM


180 GOTO 250

190 PRINT "LOADING "PF$" ... ";
200 BLOAD (PF$),B0,P(DB),U(DD)
210 PRINT "DONE"
220 H1=PEEK(DB):H2=PEEK(DB+1)
230 IF (CHR$(H1)+CHR$(H2)) = "BM" THEN 290
240 RETURN

250 PF$="ULTIMA5.BMP":GOSUB 190
260 SLOW:BANK 15
270 BSAVE "ULTIMA5.VDC",B0,U(DD),P(DB+IS) TO P(DB+IS+24000)

280 END

##################
# BITMAP ROUTINE #
##################

# HEADER
290 PRINT "BITMAP"
300 IS=FN W(DB+2)
310 PRINT "BFSIZE"IS
320 OS=FN W4(DB+10)
330 PRINT "BFOFFBITS"OS

# INFORMATIONBLOCK
#1030 PRINT "BISIZE"FN W4(DB+14)
340 BW=FN W4(DB+18)
350 PRINT "BIWIDTH"BW
360 BH=FN W4(DB+22)
370 PRINT "BIHEIGHT"BH
380 BC=FN W(DB+28)
390 PRINT "BIBITCOUNT"BC
400 IF BC<=8 THEN PRINT " INDICED COLORS"
410 IF BC >8 THEN PRINT " COLOR DEPTH "BC" NOT SUPPORTED. THE END.":END
420 PRINT "BICOMPRESSION"FN W4(DB+30)
430 PRINT "BISIZEIMAGE"FN W4(DB+34)
#1090 PRINT "BIXPELSPERMETER"FN W4(DB+38)
#1100 PRINT "BIYPELSPERMETER"FN W4(DB+42)
440 CU=FN W4(DB+46)
450 PRINT "BICLRUSED"CU
460 PRINT "BICLRIMPORTANT"FN W4(DB+50)

# PALETTE
470 IF CU<>0 THEN PRINT " PALETTE WITH "CU" ENTRIES":GOTO 490
480 IF BC<=8 THEN PRINT " PALETTE WITH "BC" ENTRIES":GOTO 490: ELSE PRINT " NO PALETTE"

490 GOTO 500


# IMAGEDATA
# ID=IMAGE DATA (IE INPUT)
#  1 BYTE PER 1 PIXEL -> 320 X 200
# VP=CURRENT ATTRIBUTE RAM POSITION
#  1 BYTE PER 8X2 PIXELS -> 80 X 100
# VR=CURRENT SCREEN RAM POSITION
#  1 BYTE PER 2X1 PIXELS -> 320 X 200

500 BANK0:FAST
510 ID=DB+OS
520 VP=AP
530 VR=0
540 S=TI
550 FOR Y=0 TO (BH/2)-1
560  FOR X=0 TO (BW/4)-1

# SX/SY:SCREEN-RAM X AND Y COORDINATE
# AX/AY:ATTRIBUTE-RAM X AND Y COORDINATE
#1322  SX=X/2:AX=X*4

# EACH "TILE" CONSISTS OF 4X2 PIXELS
# SO WE READ 4 SUBSEQUENT PIXELS, THEN 2 SUBSEQUENT PIXELS FROM THE NEXT LINE

## FIRST SCANLINE OF SCREEN-RAM
570   I=PEEK(ID):I1=PEEK(ID+1)
580   P1$=MID$(HEX$(I),3,1)   :P2$=RIGHT$(HEX$(I),1):P3$=MID$(HEX$(I1),3,1):P4$=RIGHT$(HEX$(I1),1)
590   C1$=P1$:C2$=C1$

600   P2=P2$<>P1$
610   P3=P3$<>P1$
620   P4=P4$<>P1$

# B:THE BYTE TO WRITE TO VRAM
630   B=0
640   IF P2 THEN B=48  :C2$=P2$
650   IF P3 THEN B=B+12:C2$=P3$
660   IF P4 THEN B=B+3 :C2$=P4$

670   VMW VR,B

## SECOND SCANLINE OF SCREEN-RAM

680   I=PEEK(ID+BW/2):I1=PEEK(ID+BW/2+1)
690   P5$=MID$(HEX$(I),3,1):P6$=RIGHT$(HEX$(I),1):P7$=MID$(HEX$(I1),3,1):P8$=RIGHT$(HEX$(I1),1)

700   P5=P5$<>P1$
710   P6=P6$<>P1$
720   P7=P7$<>P1$
730   P8=P8$<>P1$

740   B=0
750   IF P5 THEN B=192 :C2$=P5$
760   IF P6 THEN B=B+48:C2$=P6$
770   IF P7 THEN B=B+12:C2$=P7$
780   IF P8 THEN B=B+3: C2$=P8$

790   VMW VR+80,B

## COLORS IN ATTRIBUTE-RAM

800   VMW VP,DEC(C1$+C2$)



810   VP=VP+1
820   VR=VR+1
830   ID=ID+2
840  NEXT
850  ID=ID+BW/2

860  VR=VR+80

870 NEXT
880 S=TI-S:PRINT S

890 VTR 0,DB+IS,24000

900 S=TI-S:PRINT S

910 RETURN




920 DEF FN W(ZZ)=PEEK(ZZ)+PEEK(ZZ+1)*256
930 DEF FN W4(ZZ)=PEEK(ZZ)+PEEK(ZZ+1)*256+PEEK(ZZ+2)*65536+PEEK(ZZ+3)*16777216
940 DEF FN V(ZZ)=DEC(RIGHT$(HEX$(ZZ),1))
950 DEF FN HN(ZZ)=DEC(MID$(HEX$(ZZ),3,1))
960 DEF FN LN(ZZ)=DEC(RIGHT$(HEX$(ZZ),1))

970 RETURN